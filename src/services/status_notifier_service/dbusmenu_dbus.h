/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUSMENU_DBUS_H__
#define __DBUSMENU_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.canonical.dbusmenu */

#define DBUS_TYPE_DBUSMENU (dbus_dbusmenu_get_type ())
#define DBUS_DBUSMENU(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUSMENU, DbusDbusmenu))
#define DBUS_IS_DBUSMENU(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUSMENU))
#define DBUS_DBUSMENU_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUSMENU, DbusDbusmenuIface))

struct _DbusDbusmenu;
typedef struct _DbusDbusmenu DbusDbusmenu;
typedef struct _DbusDbusmenuIface DbusDbusmenuIface;

struct _DbusDbusmenuIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_about_to_show) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id);

  gboolean (*handle_about_to_show_group) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_ids);

  gboolean (*handle_event) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp);

  gboolean (*handle_event_group) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_events);

  gboolean (*handle_get_group_properties) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames);

  gboolean (*handle_get_layout) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames);

  gboolean (*handle_get_property) (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_name);

  const gchar *const * (*get_icon_theme_path) (DbusDbusmenu *object);

  const gchar * (*get_status) (DbusDbusmenu *object);

  const gchar * (*get_text_direction) (DbusDbusmenu *object);

  guint  (*get_version) (DbusDbusmenu *object);

  void (*item_activation_requested) (
    DbusDbusmenu *object,
    gint arg_id,
    guint arg_timestamp);

  void (*items_properties_updated) (
    DbusDbusmenu *object,
    GVariant *arg_updatedProps,
    GVariant *arg_removedProps);

  void (*layout_updated) (
    DbusDbusmenu *object,
    guint arg_revision,
    gint arg_parent);

};

GType dbus_dbusmenu_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbusmenu_interface_info (void);
guint dbus_dbusmenu_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbusmenu_complete_get_layout (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    guint revision,
    GVariant *layout);

void dbus_dbusmenu_complete_get_group_properties (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void dbus_dbusmenu_complete_get_property (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void dbus_dbusmenu_complete_event (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation);

void dbus_dbusmenu_complete_event_group (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *idErrors);

void dbus_dbusmenu_complete_about_to_show (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    gboolean needUpdate);

void dbus_dbusmenu_complete_about_to_show_group (
    DbusDbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *updatesNeeded,
    GVariant *idErrors);



/* D-Bus signal emissions functions: */
void dbus_dbusmenu_emit_items_properties_updated (
    DbusDbusmenu *object,
    GVariant *arg_updatedProps,
    GVariant *arg_removedProps);

void dbus_dbusmenu_emit_layout_updated (
    DbusDbusmenu *object,
    guint arg_revision,
    gint arg_parent);

void dbus_dbusmenu_emit_item_activation_requested (
    DbusDbusmenu *object,
    gint arg_id,
    guint arg_timestamp);



/* D-Bus method calls: */
void dbus_dbusmenu_call_get_layout (
    DbusDbusmenu *proxy,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_get_layout_finish (
    DbusDbusmenu *proxy,
    guint *out_revision,
    GVariant **out_layout,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_get_layout_sync (
    DbusDbusmenu *proxy,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames,
    guint *out_revision,
    GVariant **out_layout,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_get_group_properties (
    DbusDbusmenu *proxy,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_get_group_properties_finish (
    DbusDbusmenu *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_get_group_properties_sync (
    DbusDbusmenu *proxy,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_get_property (
    DbusDbusmenu *proxy,
    gint arg_id,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_get_property_finish (
    DbusDbusmenu *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_get_property_sync (
    DbusDbusmenu *proxy,
    gint arg_id,
    const gchar *arg_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_event (
    DbusDbusmenu *proxy,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_event_finish (
    DbusDbusmenu *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_event_sync (
    DbusDbusmenu *proxy,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_event_group (
    DbusDbusmenu *proxy,
    GVariant *arg_events,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_event_group_finish (
    DbusDbusmenu *proxy,
    GVariant **out_idErrors,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_event_group_sync (
    DbusDbusmenu *proxy,
    GVariant *arg_events,
    GVariant **out_idErrors,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_about_to_show (
    DbusDbusmenu *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_about_to_show_finish (
    DbusDbusmenu *proxy,
    gboolean *out_needUpdate,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_about_to_show_sync (
    DbusDbusmenu *proxy,
    gint arg_id,
    gboolean *out_needUpdate,
    GCancellable *cancellable,
    GError **error);

void dbus_dbusmenu_call_about_to_show_group (
    DbusDbusmenu *proxy,
    GVariant *arg_ids,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbusmenu_call_about_to_show_group_finish (
    DbusDbusmenu *proxy,
    GVariant **out_updatesNeeded,
    GVariant **out_idErrors,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbusmenu_call_about_to_show_group_sync (
    DbusDbusmenu *proxy,
    GVariant *arg_ids,
    GVariant **out_updatesNeeded,
    GVariant **out_idErrors,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint dbus_dbusmenu_get_version (DbusDbusmenu *object);
void dbus_dbusmenu_set_version (DbusDbusmenu *object, guint value);

const gchar *dbus_dbusmenu_get_text_direction (DbusDbusmenu *object);
gchar *dbus_dbusmenu_dup_text_direction (DbusDbusmenu *object);
void dbus_dbusmenu_set_text_direction (DbusDbusmenu *object, const gchar *value);

const gchar *dbus_dbusmenu_get_status (DbusDbusmenu *object);
gchar *dbus_dbusmenu_dup_status (DbusDbusmenu *object);
void dbus_dbusmenu_set_status (DbusDbusmenu *object, const gchar *value);

const gchar *const *dbus_dbusmenu_get_icon_theme_path (DbusDbusmenu *object);
gchar **dbus_dbusmenu_dup_icon_theme_path (DbusDbusmenu *object);
void dbus_dbusmenu_set_icon_theme_path (DbusDbusmenu *object, const gchar *const *value);


/* ---- */

#define DBUS_TYPE_DBUSMENU_PROXY (dbus_dbusmenu_proxy_get_type ())
#define DBUS_DBUSMENU_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUSMENU_PROXY, DbusDbusmenuProxy))
#define DBUS_DBUSMENU_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUSMENU_PROXY, DbusDbusmenuProxyClass))
#define DBUS_DBUSMENU_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUSMENU_PROXY, DbusDbusmenuProxyClass))
#define DBUS_IS_DBUSMENU_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUSMENU_PROXY))
#define DBUS_IS_DBUSMENU_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUSMENU_PROXY))

typedef struct _DbusDbusmenuProxy DbusDbusmenuProxy;
typedef struct _DbusDbusmenuProxyClass DbusDbusmenuProxyClass;
typedef struct _DbusDbusmenuProxyPrivate DbusDbusmenuProxyPrivate;

struct _DbusDbusmenuProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDbusmenuProxyPrivate *priv;
};

struct _DbusDbusmenuProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbusmenu_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDbusmenuProxy, g_object_unref)
#endif

void dbus_dbusmenu_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDbusmenu *dbus_dbusmenu_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDbusmenu *dbus_dbusmenu_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbusmenu_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDbusmenu *dbus_dbusmenu_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDbusmenu *dbus_dbusmenu_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUSMENU_SKELETON (dbus_dbusmenu_skeleton_get_type ())
#define DBUS_DBUSMENU_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUSMENU_SKELETON, DbusDbusmenuSkeleton))
#define DBUS_DBUSMENU_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUSMENU_SKELETON, DbusDbusmenuSkeletonClass))
#define DBUS_DBUSMENU_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUSMENU_SKELETON, DbusDbusmenuSkeletonClass))
#define DBUS_IS_DBUSMENU_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUSMENU_SKELETON))
#define DBUS_IS_DBUSMENU_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUSMENU_SKELETON))

typedef struct _DbusDbusmenuSkeleton DbusDbusmenuSkeleton;
typedef struct _DbusDbusmenuSkeletonClass DbusDbusmenuSkeletonClass;
typedef struct _DbusDbusmenuSkeletonPrivate DbusDbusmenuSkeletonPrivate;

struct _DbusDbusmenuSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDbusmenuSkeletonPrivate *priv;
};

struct _DbusDbusmenuSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbusmenu_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDbusmenuSkeleton, g_object_unref)
#endif

DbusDbusmenu *dbus_dbusmenu_skeleton_new (void);


G_END_DECLS

#endif /* __DBUSMENU_DBUS_H__ */

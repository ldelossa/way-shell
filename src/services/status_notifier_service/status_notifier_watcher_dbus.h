/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __STATUS_NOTIFIER_WATCHER_DBUS_H__
#define __STATUS_NOTIFIER_WATCHER_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.kde.StatusNotifierWatcher */

#define DBUS_TYPE_WATCHER_V0_GEN (dbus_watcher_v0_gen_get_type ())
#define DBUS_WATCHER_V0_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_WATCHER_V0_GEN, DbusWatcherV0Gen))
#define DBUS_IS_WATCHER_V0_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_WATCHER_V0_GEN))
#define DBUS_WATCHER_V0_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_WATCHER_V0_GEN, DbusWatcherV0GenIface))

struct _DbusWatcherV0Gen;
typedef struct _DbusWatcherV0Gen DbusWatcherV0Gen;
typedef struct _DbusWatcherV0GenIface DbusWatcherV0GenIface;

struct _DbusWatcherV0GenIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_register_host) (
    DbusWatcherV0Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean (*handle_register_item) (
    DbusWatcherV0Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean  (*get_is_host_registered) (DbusWatcherV0Gen *object);

  gint  (*get_protocol_version) (DbusWatcherV0Gen *object);

  const gchar *const * (*get_registered_items) (DbusWatcherV0Gen *object);

  void (*host_registered) (
    DbusWatcherV0Gen *object);

  void (*item_registered) (
    DbusWatcherV0Gen *object,
    const gchar *arg_service);

  void (*item_unregistered) (
    DbusWatcherV0Gen *object,
    const gchar *arg_service);

};

GType dbus_watcher_v0_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_watcher_v0_gen_interface_info (void);
guint dbus_watcher_v0_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_watcher_v0_gen_complete_register_item (
    DbusWatcherV0Gen *object,
    GDBusMethodInvocation *invocation);

void dbus_watcher_v0_gen_complete_register_host (
    DbusWatcherV0Gen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_watcher_v0_gen_emit_item_registered (
    DbusWatcherV0Gen *object,
    const gchar *arg_service);

void dbus_watcher_v0_gen_emit_item_unregistered (
    DbusWatcherV0Gen *object,
    const gchar *arg_service);

void dbus_watcher_v0_gen_emit_host_registered (
    DbusWatcherV0Gen *object);



/* D-Bus method calls: */
void dbus_watcher_v0_gen_call_register_item (
    DbusWatcherV0Gen *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_watcher_v0_gen_call_register_item_finish (
    DbusWatcherV0Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_watcher_v0_gen_call_register_item_sync (
    DbusWatcherV0Gen *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);

void dbus_watcher_v0_gen_call_register_host (
    DbusWatcherV0Gen *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_watcher_v0_gen_call_register_host_finish (
    DbusWatcherV0Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_watcher_v0_gen_call_register_host_sync (
    DbusWatcherV0Gen *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *dbus_watcher_v0_gen_get_registered_items (DbusWatcherV0Gen *object);
gchar **dbus_watcher_v0_gen_dup_registered_items (DbusWatcherV0Gen *object);
void dbus_watcher_v0_gen_set_registered_items (DbusWatcherV0Gen *object, const gchar *const *value);

gboolean dbus_watcher_v0_gen_get_is_host_registered (DbusWatcherV0Gen *object);
void dbus_watcher_v0_gen_set_is_host_registered (DbusWatcherV0Gen *object, gboolean value);

gint dbus_watcher_v0_gen_get_protocol_version (DbusWatcherV0Gen *object);
void dbus_watcher_v0_gen_set_protocol_version (DbusWatcherV0Gen *object, gint value);


/* ---- */

#define DBUS_TYPE_WATCHER_V0_GEN_PROXY (dbus_watcher_v0_gen_proxy_get_type ())
#define DBUS_WATCHER_V0_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_WATCHER_V0_GEN_PROXY, DbusWatcherV0GenProxy))
#define DBUS_WATCHER_V0_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_WATCHER_V0_GEN_PROXY, DbusWatcherV0GenProxyClass))
#define DBUS_WATCHER_V0_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_WATCHER_V0_GEN_PROXY, DbusWatcherV0GenProxyClass))
#define DBUS_IS_WATCHER_V0_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_WATCHER_V0_GEN_PROXY))
#define DBUS_IS_WATCHER_V0_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_WATCHER_V0_GEN_PROXY))

typedef struct _DbusWatcherV0GenProxy DbusWatcherV0GenProxy;
typedef struct _DbusWatcherV0GenProxyClass DbusWatcherV0GenProxyClass;
typedef struct _DbusWatcherV0GenProxyPrivate DbusWatcherV0GenProxyPrivate;

struct _DbusWatcherV0GenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusWatcherV0GenProxyPrivate *priv;
};

struct _DbusWatcherV0GenProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_watcher_v0_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusWatcherV0GenProxy, g_object_unref)
#endif

void dbus_watcher_v0_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusWatcherV0Gen *dbus_watcher_v0_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusWatcherV0Gen *dbus_watcher_v0_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_watcher_v0_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusWatcherV0Gen *dbus_watcher_v0_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusWatcherV0Gen *dbus_watcher_v0_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_WATCHER_V0_GEN_SKELETON (dbus_watcher_v0_gen_skeleton_get_type ())
#define DBUS_WATCHER_V0_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_WATCHER_V0_GEN_SKELETON, DbusWatcherV0GenSkeleton))
#define DBUS_WATCHER_V0_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_WATCHER_V0_GEN_SKELETON, DbusWatcherV0GenSkeletonClass))
#define DBUS_WATCHER_V0_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_WATCHER_V0_GEN_SKELETON, DbusWatcherV0GenSkeletonClass))
#define DBUS_IS_WATCHER_V0_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_WATCHER_V0_GEN_SKELETON))
#define DBUS_IS_WATCHER_V0_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_WATCHER_V0_GEN_SKELETON))

typedef struct _DbusWatcherV0GenSkeleton DbusWatcherV0GenSkeleton;
typedef struct _DbusWatcherV0GenSkeletonClass DbusWatcherV0GenSkeletonClass;
typedef struct _DbusWatcherV0GenSkeletonPrivate DbusWatcherV0GenSkeletonPrivate;

struct _DbusWatcherV0GenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusWatcherV0GenSkeletonPrivate *priv;
};

struct _DbusWatcherV0GenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_watcher_v0_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusWatcherV0GenSkeleton, g_object_unref)
#endif

DbusWatcherV0Gen *dbus_watcher_v0_gen_skeleton_new (void);


G_END_DECLS

#endif /* __STATUS_NOTIFIER_WATCHER_DBUS_H__ */

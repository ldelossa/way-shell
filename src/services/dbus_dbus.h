/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUS_DBUS_H__
#define __DBUS_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus */

#define DBUS_TYPE_DBUS (dbus_dbus_get_type ())
#define DBUS_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS, DbusDBus))
#define DBUS_IS_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS))
#define DBUS_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS, DbusDBusIface))

struct _DbusDBus;
typedef struct _DbusDBus DbusDBus;
typedef struct _DbusDBusIface DbusDBusIface;

struct _DbusDBusIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_match) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_adt_audit_session_data) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_credentials) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_selinux_security_context) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_unix_process_id) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_unix_user) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_id) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name_owner) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_hello) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_activatable_names) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_names) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_queued_owners) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_name_has_owner) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_release_name) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_reload_config) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_match) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_request_name) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

  gboolean (*handle_start_service_by_name) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

  gboolean (*handle_update_activation_environment) (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0);

  const gchar *const * (*get_features) (DbusDBus *object);

  const gchar *const * (*get_interfaces) (DbusDBus *object);

  void (*name_acquired) (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0);

  void (*name_lost) (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0);

  void (*name_owner_changed) (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2);

};

GType dbus_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_interface_info (void);
guint dbus_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_complete_hello (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void dbus_dbus_complete_request_name (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg2);

void dbus_dbus_complete_release_name (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void dbus_dbus_complete_start_service_by_name (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg2);

void dbus_dbus_complete_update_activation_environment (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

void dbus_dbus_complete_name_has_owner (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg1);

void dbus_dbus_complete_list_names (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);

void dbus_dbus_complete_list_activatable_names (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);

void dbus_dbus_complete_add_match (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

void dbus_dbus_complete_remove_match (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

void dbus_dbus_complete_get_name_owner (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void dbus_dbus_complete_list_queued_owners (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg1);

void dbus_dbus_complete_get_connection_unix_user (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void dbus_dbus_complete_get_connection_unix_process_id (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void dbus_dbus_complete_get_adt_audit_session_data (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void dbus_dbus_complete_get_connection_selinux_security_context (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void dbus_dbus_complete_reload_config (
    DbusDBus *object,
    GDBusMethodInvocation *invocation);

void dbus_dbus_complete_get_id (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void dbus_dbus_complete_get_connection_credentials (
    DbusDBus *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);



/* D-Bus signal emissions functions: */
void dbus_dbus_emit_name_owner_changed (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2);

void dbus_dbus_emit_name_lost (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0);

void dbus_dbus_emit_name_acquired (
    DbusDBus *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void dbus_dbus_call_hello (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_hello_finish (
    DbusDBus *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_hello_sync (
    DbusDBus *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_request_name (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_request_name_finish (
    DbusDBus *proxy,
    guint *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_request_name_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_release_name (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_release_name_finish (
    DbusDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_release_name_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_start_service_by_name (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_start_service_by_name_finish (
    DbusDBus *proxy,
    guint *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_start_service_by_name_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_update_activation_environment (
    DbusDBus *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_update_activation_environment_finish (
    DbusDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_update_activation_environment_sync (
    DbusDBus *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_name_has_owner (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_name_has_owner_finish (
    DbusDBus *proxy,
    gboolean *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_name_has_owner_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gboolean *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_list_names (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_list_names_finish (
    DbusDBus *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_list_names_sync (
    DbusDBus *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_list_activatable_names (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_list_activatable_names_finish (
    DbusDBus *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_list_activatable_names_sync (
    DbusDBus *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_add_match (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_add_match_finish (
    DbusDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_add_match_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_remove_match (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_remove_match_finish (
    DbusDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_remove_match_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_name_owner (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_name_owner_finish (
    DbusDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_name_owner_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_list_queued_owners (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_list_queued_owners_finish (
    DbusDBus *proxy,
    gchar ***out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_list_queued_owners_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar ***out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_connection_unix_user (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_connection_unix_user_finish (
    DbusDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_connection_unix_user_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_connection_unix_process_id (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_connection_unix_process_id_finish (
    DbusDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_connection_unix_process_id_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_adt_audit_session_data (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_adt_audit_session_data_finish (
    DbusDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_adt_audit_session_data_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_connection_selinux_security_context (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_connection_selinux_security_context_finish (
    DbusDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_connection_selinux_security_context_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_reload_config (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_reload_config_finish (
    DbusDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_reload_config_sync (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_id (
    DbusDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_id_finish (
    DbusDBus *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_id_sync (
    DbusDBus *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_call_get_connection_credentials (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_call_get_connection_credentials_finish (
    DbusDBus *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_call_get_connection_credentials_sync (
    DbusDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *dbus_dbus_get_features (DbusDBus *object);
gchar **dbus_dbus_dup_features (DbusDBus *object);
void dbus_dbus_set_features (DbusDBus *object, const gchar *const *value);

const gchar *const *dbus_dbus_get_interfaces (DbusDBus *object);
gchar **dbus_dbus_dup_interfaces (DbusDBus *object);
void dbus_dbus_set_interfaces (DbusDBus *object, const gchar *const *value);


/* ---- */

#define DBUS_TYPE_DBUS_PROXY (dbus_dbus_proxy_get_type ())
#define DBUS_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PROXY, DbusDBusProxy))
#define DBUS_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_PROXY, DbusDBusProxyClass))
#define DBUS_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_PROXY, DbusDBusProxyClass))
#define DBUS_IS_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PROXY))
#define DBUS_IS_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_PROXY))

typedef struct _DbusDBusProxy DbusDBusProxy;
typedef struct _DbusDBusProxyClass DbusDBusProxyClass;
typedef struct _DbusDBusProxyPrivate DbusDBusProxyPrivate;

struct _DbusDBusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusProxyPrivate *priv;
};

struct _DbusDBusProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusProxy, g_object_unref)
#endif

void dbus_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBus *dbus_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBus *dbus_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBus *dbus_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBus *dbus_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_SKELETON (dbus_dbus_skeleton_get_type ())
#define DBUS_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_SKELETON, DbusDBusSkeleton))
#define DBUS_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_SKELETON, DbusDBusSkeletonClass))
#define DBUS_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_SKELETON, DbusDBusSkeletonClass))
#define DBUS_IS_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_SKELETON))
#define DBUS_IS_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_SKELETON))

typedef struct _DbusDBusSkeleton DbusDBusSkeleton;
typedef struct _DbusDBusSkeletonClass DbusDBusSkeletonClass;
typedef struct _DbusDBusSkeletonPrivate DbusDBusSkeletonPrivate;

struct _DbusDBusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusSkeletonPrivate *priv;
};

struct _DbusDBusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusSkeleton, g_object_unref)
#endif

DbusDBus *dbus_dbus_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define DBUS_TYPE_DBUS_PROPERTIES (dbus_dbus_properties_get_type ())
#define DBUS_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PROPERTIES, DbusDBusProperties))
#define DBUS_IS_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PROPERTIES))
#define DBUS_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS_PROPERTIES, DbusDBusPropertiesIface))

struct _DbusDBusProperties;
typedef struct _DbusDBusProperties DbusDBusProperties;
typedef struct _DbusDBusPropertiesIface DbusDBusPropertiesIface;

struct _DbusDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_get_all) (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_set) (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2);

  void (*properties_changed) (
    DbusDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType dbus_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_properties_interface_info (void);
guint dbus_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_properties_complete_get (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void dbus_dbus_properties_complete_get_all (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void dbus_dbus_properties_complete_set (
    DbusDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_dbus_properties_emit_properties_changed (
    DbusDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void dbus_dbus_properties_call_get (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_properties_call_get_finish (
    DbusDBusProperties *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_properties_call_get_sync (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_properties_call_get_all (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_properties_call_get_all_finish (
    DbusDBusProperties *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_properties_call_get_all_sync (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_properties_call_set (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_properties_call_set_finish (
    DbusDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_properties_call_set_sync (
    DbusDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_DBUS_PROPERTIES_PROXY (dbus_dbus_properties_proxy_get_type ())
#define DBUS_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PROPERTIES_PROXY, DbusDBusPropertiesProxy))
#define DBUS_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_PROPERTIES_PROXY, DbusDBusPropertiesProxyClass))
#define DBUS_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_PROPERTIES_PROXY, DbusDBusPropertiesProxyClass))
#define DBUS_IS_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PROPERTIES_PROXY))
#define DBUS_IS_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_PROPERTIES_PROXY))

typedef struct _DbusDBusPropertiesProxy DbusDBusPropertiesProxy;
typedef struct _DbusDBusPropertiesProxyClass DbusDBusPropertiesProxyClass;
typedef struct _DbusDBusPropertiesProxyPrivate DbusDBusPropertiesProxyPrivate;

struct _DbusDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusPropertiesProxyPrivate *priv;
};

struct _DbusDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusPropertiesProxy, g_object_unref)
#endif

void dbus_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusProperties *dbus_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusProperties *dbus_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusProperties *dbus_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusProperties *dbus_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_PROPERTIES_SKELETON (dbus_dbus_properties_skeleton_get_type ())
#define DBUS_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PROPERTIES_SKELETON, DbusDBusPropertiesSkeleton))
#define DBUS_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_PROPERTIES_SKELETON, DbusDBusPropertiesSkeletonClass))
#define DBUS_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_PROPERTIES_SKELETON, DbusDBusPropertiesSkeletonClass))
#define DBUS_IS_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PROPERTIES_SKELETON))
#define DBUS_IS_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_PROPERTIES_SKELETON))

typedef struct _DbusDBusPropertiesSkeleton DbusDBusPropertiesSkeleton;
typedef struct _DbusDBusPropertiesSkeletonClass DbusDBusPropertiesSkeletonClass;
typedef struct _DbusDBusPropertiesSkeletonPrivate DbusDBusPropertiesSkeletonPrivate;

struct _DbusDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusPropertiesSkeletonPrivate *priv;
};

struct _DbusDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusPropertiesSkeleton, g_object_unref)
#endif

DbusDBusProperties *dbus_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define DBUS_TYPE_DBUS_INTROSPECTABLE (dbus_dbus_introspectable_get_type ())
#define DBUS_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_INTROSPECTABLE, DbusDBusIntrospectable))
#define DBUS_IS_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_INTROSPECTABLE))
#define DBUS_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS_INTROSPECTABLE, DbusDBusIntrospectableIface))

struct _DbusDBusIntrospectable;
typedef struct _DbusDBusIntrospectable DbusDBusIntrospectable;
typedef struct _DbusDBusIntrospectableIface DbusDBusIntrospectableIface;

struct _DbusDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    DbusDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType dbus_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_introspectable_interface_info (void);
guint dbus_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_introspectable_complete_introspect (
    DbusDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);



/* D-Bus method calls: */
void dbus_dbus_introspectable_call_introspect (
    DbusDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_introspectable_call_introspect_finish (
    DbusDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_introspectable_call_introspect_sync (
    DbusDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY (dbus_dbus_introspectable_proxy_get_type ())
#define DBUS_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, DbusDBusIntrospectableProxy))
#define DBUS_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, DbusDBusIntrospectableProxyClass))
#define DBUS_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, DbusDBusIntrospectableProxyClass))
#define DBUS_IS_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY))
#define DBUS_IS_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY))

typedef struct _DbusDBusIntrospectableProxy DbusDBusIntrospectableProxy;
typedef struct _DbusDBusIntrospectableProxyClass DbusDBusIntrospectableProxyClass;
typedef struct _DbusDBusIntrospectableProxyPrivate DbusDBusIntrospectableProxyPrivate;

struct _DbusDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusIntrospectableProxyPrivate *priv;
};

struct _DbusDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusIntrospectableProxy, g_object_unref)
#endif

void dbus_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusIntrospectable *dbus_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusIntrospectable *dbus_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusIntrospectable *dbus_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusIntrospectable *dbus_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON (dbus_dbus_introspectable_skeleton_get_type ())
#define DBUS_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, DbusDBusIntrospectableSkeleton))
#define DBUS_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, DbusDBusIntrospectableSkeletonClass))
#define DBUS_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, DbusDBusIntrospectableSkeletonClass))
#define DBUS_IS_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON))
#define DBUS_IS_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _DbusDBusIntrospectableSkeleton DbusDBusIntrospectableSkeleton;
typedef struct _DbusDBusIntrospectableSkeletonClass DbusDBusIntrospectableSkeletonClass;
typedef struct _DbusDBusIntrospectableSkeletonPrivate DbusDBusIntrospectableSkeletonPrivate;

struct _DbusDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusIntrospectableSkeletonPrivate *priv;
};

struct _DbusDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusIntrospectableSkeleton, g_object_unref)
#endif

DbusDBusIntrospectable *dbus_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Monitoring */

#define DBUS_TYPE_DBUS_MONITORING (dbus_dbus_monitoring_get_type ())
#define DBUS_DBUS_MONITORING(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_MONITORING, DbusDBusMonitoring))
#define DBUS_IS_DBUS_MONITORING(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_MONITORING))
#define DBUS_DBUS_MONITORING_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS_MONITORING, DbusDBusMonitoringIface))

struct _DbusDBusMonitoring;
typedef struct _DbusDBusMonitoring DbusDBusMonitoring;
typedef struct _DbusDBusMonitoringIface DbusDBusMonitoringIface;

struct _DbusDBusMonitoringIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_become_monitor) (
    DbusDBusMonitoring *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

};

GType dbus_dbus_monitoring_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_monitoring_interface_info (void);
guint dbus_dbus_monitoring_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_monitoring_complete_become_monitor (
    DbusDBusMonitoring *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void dbus_dbus_monitoring_call_become_monitor (
    DbusDBusMonitoring *proxy,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_monitoring_call_become_monitor_finish (
    DbusDBusMonitoring *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_monitoring_call_become_monitor_sync (
    DbusDBusMonitoring *proxy,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_DBUS_MONITORING_PROXY (dbus_dbus_monitoring_proxy_get_type ())
#define DBUS_DBUS_MONITORING_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_MONITORING_PROXY, DbusDBusMonitoringProxy))
#define DBUS_DBUS_MONITORING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_MONITORING_PROXY, DbusDBusMonitoringProxyClass))
#define DBUS_DBUS_MONITORING_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_MONITORING_PROXY, DbusDBusMonitoringProxyClass))
#define DBUS_IS_DBUS_MONITORING_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_MONITORING_PROXY))
#define DBUS_IS_DBUS_MONITORING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_MONITORING_PROXY))

typedef struct _DbusDBusMonitoringProxy DbusDBusMonitoringProxy;
typedef struct _DbusDBusMonitoringProxyClass DbusDBusMonitoringProxyClass;
typedef struct _DbusDBusMonitoringProxyPrivate DbusDBusMonitoringProxyPrivate;

struct _DbusDBusMonitoringProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusMonitoringProxyPrivate *priv;
};

struct _DbusDBusMonitoringProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_monitoring_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusMonitoringProxy, g_object_unref)
#endif

void dbus_dbus_monitoring_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusMonitoring *dbus_dbus_monitoring_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusMonitoring *dbus_dbus_monitoring_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_monitoring_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusMonitoring *dbus_dbus_monitoring_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusMonitoring *dbus_dbus_monitoring_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_MONITORING_SKELETON (dbus_dbus_monitoring_skeleton_get_type ())
#define DBUS_DBUS_MONITORING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_MONITORING_SKELETON, DbusDBusMonitoringSkeleton))
#define DBUS_DBUS_MONITORING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_MONITORING_SKELETON, DbusDBusMonitoringSkeletonClass))
#define DBUS_DBUS_MONITORING_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_MONITORING_SKELETON, DbusDBusMonitoringSkeletonClass))
#define DBUS_IS_DBUS_MONITORING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_MONITORING_SKELETON))
#define DBUS_IS_DBUS_MONITORING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_MONITORING_SKELETON))

typedef struct _DbusDBusMonitoringSkeleton DbusDBusMonitoringSkeleton;
typedef struct _DbusDBusMonitoringSkeletonClass DbusDBusMonitoringSkeletonClass;
typedef struct _DbusDBusMonitoringSkeletonPrivate DbusDBusMonitoringSkeletonPrivate;

struct _DbusDBusMonitoringSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusMonitoringSkeletonPrivate *priv;
};

struct _DbusDBusMonitoringSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_monitoring_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusMonitoringSkeleton, g_object_unref)
#endif

DbusDBusMonitoring *dbus_dbus_monitoring_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Peer */

#define DBUS_TYPE_DBUS_PEER (dbus_dbus_peer_get_type ())
#define DBUS_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PEER, DbusDBusPeer))
#define DBUS_IS_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PEER))
#define DBUS_DBUS_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS_PEER, DbusDBusPeerIface))

struct _DbusDBusPeer;
typedef struct _DbusDBusPeer DbusDBusPeer;
typedef struct _DbusDBusPeerIface DbusDBusPeerIface;

struct _DbusDBusPeerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_machine_id) (
    DbusDBusPeer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ping) (
    DbusDBusPeer *object,
    GDBusMethodInvocation *invocation);

};

GType dbus_dbus_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_peer_interface_info (void);
guint dbus_dbus_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_peer_complete_get_machine_id (
    DbusDBusPeer *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void dbus_dbus_peer_complete_ping (
    DbusDBusPeer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void dbus_dbus_peer_call_get_machine_id (
    DbusDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_peer_call_get_machine_id_finish (
    DbusDBusPeer *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_peer_call_get_machine_id_sync (
    DbusDBusPeer *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_peer_call_ping (
    DbusDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_peer_call_ping_finish (
    DbusDBusPeer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_peer_call_ping_sync (
    DbusDBusPeer *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_DBUS_PEER_PROXY (dbus_dbus_peer_proxy_get_type ())
#define DBUS_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PEER_PROXY, DbusDBusPeerProxy))
#define DBUS_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_PEER_PROXY, DbusDBusPeerProxyClass))
#define DBUS_DBUS_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_PEER_PROXY, DbusDBusPeerProxyClass))
#define DBUS_IS_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PEER_PROXY))
#define DBUS_IS_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_PEER_PROXY))

typedef struct _DbusDBusPeerProxy DbusDBusPeerProxy;
typedef struct _DbusDBusPeerProxyClass DbusDBusPeerProxyClass;
typedef struct _DbusDBusPeerProxyPrivate DbusDBusPeerProxyPrivate;

struct _DbusDBusPeerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusPeerProxyPrivate *priv;
};

struct _DbusDBusPeerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_peer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusPeerProxy, g_object_unref)
#endif

void dbus_dbus_peer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusPeer *dbus_dbus_peer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusPeer *dbus_dbus_peer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_peer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusPeer *dbus_dbus_peer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusPeer *dbus_dbus_peer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_PEER_SKELETON (dbus_dbus_peer_skeleton_get_type ())
#define DBUS_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_PEER_SKELETON, DbusDBusPeerSkeleton))
#define DBUS_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_PEER_SKELETON, DbusDBusPeerSkeletonClass))
#define DBUS_DBUS_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_PEER_SKELETON, DbusDBusPeerSkeletonClass))
#define DBUS_IS_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_PEER_SKELETON))
#define DBUS_IS_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_PEER_SKELETON))

typedef struct _DbusDBusPeerSkeleton DbusDBusPeerSkeleton;
typedef struct _DbusDBusPeerSkeletonClass DbusDBusPeerSkeletonClass;
typedef struct _DbusDBusPeerSkeletonPrivate DbusDBusPeerSkeletonPrivate;

struct _DbusDBusPeerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusPeerSkeletonPrivate *priv;
};

struct _DbusDBusPeerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_peer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusPeerSkeleton, g_object_unref)
#endif

DbusDBusPeer *dbus_dbus_peer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Debug.Stats */

#define DBUS_TYPE_DBUS_DEBUG_STATS (dbus_dbus_debug_stats_get_type ())
#define DBUS_DBUS_DEBUG_STATS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_DEBUG_STATS, DbusDBusDebugStats))
#define DBUS_IS_DBUS_DEBUG_STATS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_DEBUG_STATS))
#define DBUS_DBUS_DEBUG_STATS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_DBUS_DEBUG_STATS, DbusDBusDebugStatsIface))

struct _DbusDBusDebugStats;
typedef struct _DbusDBusDebugStats DbusDBusDebugStats;
typedef struct _DbusDBusDebugStatsIface DbusDBusDebugStatsIface;

struct _DbusDBusDebugStatsIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_all_match_rules) (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_connection_stats) (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_stats) (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation);

};

GType dbus_dbus_debug_stats_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dbus_debug_stats_interface_info (void);
guint dbus_dbus_debug_stats_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dbus_debug_stats_complete_get_stats (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void dbus_dbus_debug_stats_complete_get_connection_stats (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void dbus_dbus_debug_stats_complete_get_all_match_rules (
    DbusDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);



/* D-Bus method calls: */
void dbus_dbus_debug_stats_call_get_stats (
    DbusDBusDebugStats *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_debug_stats_call_get_stats_finish (
    DbusDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_debug_stats_call_get_stats_sync (
    DbusDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_debug_stats_call_get_connection_stats (
    DbusDBusDebugStats *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_debug_stats_call_get_connection_stats_finish (
    DbusDBusDebugStats *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_debug_stats_call_get_connection_stats_sync (
    DbusDBusDebugStats *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void dbus_dbus_debug_stats_call_get_all_match_rules (
    DbusDBusDebugStats *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dbus_debug_stats_call_get_all_match_rules_finish (
    DbusDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dbus_debug_stats_call_get_all_match_rules_sync (
    DbusDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_DBUS_DEBUG_STATS_PROXY (dbus_dbus_debug_stats_proxy_get_type ())
#define DBUS_DBUS_DEBUG_STATS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_DEBUG_STATS_PROXY, DbusDBusDebugStatsProxy))
#define DBUS_DBUS_DEBUG_STATS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_DEBUG_STATS_PROXY, DbusDBusDebugStatsProxyClass))
#define DBUS_DBUS_DEBUG_STATS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_DEBUG_STATS_PROXY, DbusDBusDebugStatsProxyClass))
#define DBUS_IS_DBUS_DEBUG_STATS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_DEBUG_STATS_PROXY))
#define DBUS_IS_DBUS_DEBUG_STATS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_DEBUG_STATS_PROXY))

typedef struct _DbusDBusDebugStatsProxy DbusDBusDebugStatsProxy;
typedef struct _DbusDBusDebugStatsProxyClass DbusDBusDebugStatsProxyClass;
typedef struct _DbusDBusDebugStatsProxyPrivate DbusDBusDebugStatsProxyPrivate;

struct _DbusDBusDebugStatsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDBusDebugStatsProxyPrivate *priv;
};

struct _DbusDBusDebugStatsProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dbus_debug_stats_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusDebugStatsProxy, g_object_unref)
#endif

void dbus_dbus_debug_stats_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusDebugStats *dbus_dbus_debug_stats_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusDebugStats *dbus_dbus_debug_stats_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dbus_debug_stats_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDBusDebugStats *dbus_dbus_debug_stats_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDBusDebugStats *dbus_dbus_debug_stats_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON (dbus_dbus_debug_stats_skeleton_get_type ())
#define DBUS_DBUS_DEBUG_STATS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON, DbusDBusDebugStatsSkeleton))
#define DBUS_DBUS_DEBUG_STATS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON, DbusDBusDebugStatsSkeletonClass))
#define DBUS_DBUS_DEBUG_STATS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON, DbusDBusDebugStatsSkeletonClass))
#define DBUS_IS_DBUS_DEBUG_STATS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON))
#define DBUS_IS_DBUS_DEBUG_STATS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_DBUS_DEBUG_STATS_SKELETON))

typedef struct _DbusDBusDebugStatsSkeleton DbusDBusDebugStatsSkeleton;
typedef struct _DbusDBusDebugStatsSkeletonClass DbusDBusDebugStatsSkeletonClass;
typedef struct _DbusDBusDebugStatsSkeletonPrivate DbusDBusDebugStatsSkeletonPrivate;

struct _DbusDBusDebugStatsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDBusDebugStatsSkeletonPrivate *priv;
};

struct _DbusDBusDebugStatsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dbus_debug_stats_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDBusDebugStatsSkeleton, g_object_unref)
#endif

DbusDBusDebugStats *dbus_dbus_debug_stats_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_DBUS_H__ */
